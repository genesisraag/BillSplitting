# -*- coding: utf-8 -*-
"""434 Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uf34zY-qU4gdmtdLGcb8r1TdyXHvlKXv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Initialize data structures
expenses = {}  # Dictionary to hold expenses
people = []    # List to track all unique people
expense_counter = 1  # Integer counter for expense IDs

# Function to add an expense
def add_expense(expense_id, amount, payer, participants):
    # Nested if/else to validate input
    if amount > 0:
        if payer:
            print(f"Adding expense of ${amount:.2f} by {payer}")
        else:
            print("Payer name is missing.")
    else:
        print("Invalid amount. Must be greater than 0.")
        return

    # Add expense to dictionary
    expenses[expense_id] = {
        'amount': amount,
        'payer': payer,
        'participants': participants
    }

    # Add payer and participants to people list if not already included
    for person in [payer] + participants:
        if person not in people:
            people.append(person)

# Function to collect expense data from user
def get_expense_details():
    global expense_counter

    expense_id = expense_counter
    expense_counter += 1

    while True:
        try:
            amount = float(input("Enter the amount for the expense: $"))
            if amount <= 0:
                print("Amount must be greater than 0.")
                continue
            break
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

    while True:
      payer = input("Enter the name of the person who paid: ").strip()
      if not payer:
        print("Payer name cannot be empty.")
      elif payer.isnumeric():
        print("Invalid name. Payer name cannot be a number.")
      else:
        break
    while True:
        participants_input = input("Enter the names of the people involved (comma separated): ")

        participants = [p.strip() for p in participants_input.split(',') if p.strip()]
        if participants:
            break
        else:
            print("You must enter at least one participant.")

    # ðŸ”€ Ensure the payer is in the participants list
    if payer not in participants:
        participants.append(payer)

    add_expense(expense_id, amount, payer, participants)
    print("Expense added successfully!")

# Function to calculate balances
def calculate_totals():
    total_spent = {}
    total_owed = {}

    for expense_id in expenses:
        expense = expenses[expense_id]
        payer = expense["payer"]
        amount = expense["amount"]
        participants = expense["participants"]
        num_people = len(participants)
        share = amount / num_people

        total_spent[payer] = total_spent.get(payer, 0) + amount

        for person in participants:
            total_owed[person] = total_owed.get(person, 0) + share

    final_balance = {}
    all_people = set(total_spent) | set(total_owed)

    for person in all_people:
        paid = total_spent.get(person, 0)
        owed = total_owed.get(person, 0)
        final_balance[person] = paid - owed

    return final_balance

# Function to display balances using Pandas
def display_balances_with_pandas(balances):
    df = pd.DataFrame(balances.items(), columns=['Person', 'Balance'])
    df['Status'] = ['Owes' if b < 0 else 'Owed' for b in df['Balance']]
    df['Formatted'] = df['Balance'].abs().map("${:.2f}".format)
    print("\nPandas DataFrame View:")
    print(df[['Person', 'Status', 'Formatted']])

# Function to save balances to a text file
def save_balances_to_file(balances, filename="balances.txt"):
    with open(filename, 'w') as file:
        file.write("Final Balances:\n")
        for person, balance in balances.items():
            if balance < 0:
                file.write(f"{person}: Owes ${-balance:.2f}\n")
            else:
                file.write(f"{person}: Owed ${balance:.2f}\n")
    print(f"\nBalances saved to {filename}")

# Function to display averages using NumPy
def average_stats(balances):
    values = np.array(list(balances.values()))
    avg = np.mean(values)
    print(f"\nAverage Net Balance: ${avg:.2f}")

# Function to plot balances using Matplotlib
def plot_balances(balances):
    people = list(balances.keys())
    values = list(balances.values())

    plt.figure(figsize=(10, 5))
    plt.bar(people, values, color=['red' if v < 0 else 'green' for v in values])
    plt.axhline(0, color='black', linewidth=0.8)
    plt.title("Final Balances")
    plt.ylabel("Amount ($)")
    plt.xlabel("Person")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def show_detailed_transactions():
    transactions = []

    for expense_id, expense in expenses.items():
        amount = expense['amount']
        payer = expense['payer']
        participants = expense['participants']
        share = amount / len(participants)

        for participant in participants:
            if participant != payer:
                transactions.append((participant, payer, share))

    print("\nDetailed Transactions:")
    for debtor, creditor, amount in transactions:
        print(f"{debtor} owes {creditor} ${amount:.2f}")

# Main program loop
exit_loop = False  # Define the flag before the loop starts

while not exit_loop:
    get_expense_details()

    while True:
        another = input("Do you want to add another expense? (yes/no): ").strip().lower()
        if another in ['yes', 'y']:
            break  # valid input, continue outer loop
        elif another in ['no', 'n']:
            exit_loop = True  # set flag to exit after inner loop
            break
        else:
            print("Invalid input. Please enter 'yes', 'y', 'no', or 'n'.")

balances = calculate_totals()

print("\nFinal Balances (Positive = Owed money, Negative = Owes money):")
for person in balances:
    balance = balances[person]
    if balance < 0:
        print(f"{person}: Owes ${-balance:.2f}")
    else:
        print(f"{person}: Owed ${balance:.2f}")

show_detailed_transactions()

# Display using Pandas
display_balances_with_pandas(balances)

# Save to file
save_balances_to_file(balances)

# Show averages using NumPy
average_stats(balances)

# Plot results using Matplotlib
plot_balances(balances)